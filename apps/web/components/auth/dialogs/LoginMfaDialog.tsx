'use client';

import { useCallback, useState } from 'react';

import Link from 'next/link';
import { useRouter } from 'next/navigation';

import { useMutation } from '@tanstack/react-query';
import { Loader2 } from 'lucide-react';

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from '@/components/ui/input-otp';

import { mfaVerifyLoginMutationFunction } from '@/lib/api/mfa.api';

import { useToast } from '@/hooks/use-toast';

interface LoginMfaDialogProps {
  open: boolean;
  onCloseAction: () => void;
  email: string;
}

export function LoginMfaDialog({ open, onCloseAction, email }: LoginMfaDialogProps) {
  const [otp, setOtp] = useState('');
  const { toast } = useToast();
  const router = useRouter();

  const { mutateAsync: verifyLoginMfa, isPending: isVerifying } = useMutation({
    mutationFn: mfaVerifyLoginMutationFunction,
  });

  const handleVerify = useCallback(async () => {
    try {
      await verifyLoginMfa({ code: otp, email });

      toast({
        title: 'Verification Successful',
        description: 'Your MFA code has been successfully verified.',
      });

      onCloseAction();

      router.replace('/auth/dashboard');
    } catch (error) {
      toast({
        title: 'Error',
        description: (error as Error).message,
        variant: 'destructive',
      });
    }
  }, [verifyLoginMfa, otp, email, toast, onCloseAction, router]);

  const isSubmitDisabled = isVerifying || otp.length !== 6;

  return (
    <Dialog open={open} onOpenChange={onCloseAction}>
      <DialogContent className="sm:max-w-md [&>button:last-child]:hidden">
        <DialogHeader>
          <DialogTitle>Multi-Factor Authentication (MFA)</DialogTitle>
          <DialogDescription>
            Please enter the 6-digit code generated by your authenticator app.
          </DialogDescription>
        </DialogHeader>

        <div className="text-secondary-foreground grid gap-4 pt-4 text-sm">
          <div className="flex justify-center">
            <InputOTP
              maxLength={6}
              value={otp}
              onChange={setOtp}
              onKeyDown={(event) => {
                if (event.key === 'Enter') {
                  handleVerify();
                }
              }}
            >
              <InputOTPGroup>
                <InputOTPSlot index={0} />
                <InputOTPSlot index={1} />
                <InputOTPSlot index={2} />
              </InputOTPGroup>
              <InputOTPSeparator />
              <InputOTPGroup>
                <InputOTPSlot index={3} />
                <InputOTPSlot index={4} />
                <InputOTPSlot index={5} />
              </InputOTPGroup>
            </InputOTP>
          </div>
        </div>

        <div className="flex w-full flex-col items-end justify-center py-4">
          <Link
            className="text-secondary-foreground text-xs hover:underline"
            href={'mailto:support@locatr.tech'}
          >
            Need help? Contact support
          </Link>
        </div>

        <DialogFooter className="flex flex-col gap-2 sm:flex-row sm:justify-end">
          <DialogClose asChild>
            <Button variant="secondary">Cancel</Button>
          </DialogClose>
          <Button onClick={handleVerify} disabled={isSubmitDisabled}>
            {isVerifying ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Verifying...
              </>
            ) : (
              'Verify Code'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
