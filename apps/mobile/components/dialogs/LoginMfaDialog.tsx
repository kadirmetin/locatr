import { useMutation } from "@tanstack/react-query";
import { useRouter } from "expo-router";
import { OTPInput, OTPInputRef } from "input-otp-native";
import { useRef, useState } from "react";
import { ActivityIndicator, Keyboard, Linking, View } from "react-native";

import { loginVerifyMfaMutationFunction } from "~/api/auth.api";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "~/components/ui/alert-dialog";
import { Text } from "~/components/ui/text";
import { useAuthContext } from "~/context/auth-context";
import { useErrorHandler } from "~/hooks/use-error-handler";
import { useAppStore } from "~/stores/app-store";

import { Button } from "../ui/button";
import { Slot } from "../ui/slot";
import { H4, P, Small } from "../ui/typography";

interface LoginMfaDialogProps {
  open: boolean;
  onCloseAction: () => void;
  email: string;
}

export const LoginMfaDialog = ({
  open,
  onCloseAction,
  email,
}: LoginMfaDialogProps) => {
  const ref = useRef<OTPInputRef>(null);
  const [error, setError] = useState<string>("");
  const [otp, setOtp] = useState<string>("");
  const { refetch } = useAuthContext();
  const { setLoading } = useAppStore();
  const router = useRouter();
  const { handleError } = useErrorHandler();

  const { mutateAsync: verifyLoginMfa, isPending: isLoading } = useMutation({
    mutationFn: loginVerifyMfaMutationFunction,
  });

  const handleSubmit = async (code: string) => {
    try {
      setError("");
      Keyboard.dismiss();

      await verifyLoginMfa({
        code,
        email,
      });

      onCloseAction();
      setLoading(true);
      refetch();

      router.replace("/home");
    } catch (error) {
      console.error("Error: ", error);

      const errorMessage = handleError(error);

      setError(errorMessage);
    }
  };

  return (
    <AlertDialog open={open}>
      <AlertDialogContent className="p-4 gap-8 min-w-[90%]">
        <AlertDialogHeader>
          <AlertDialogTitle>
            <H4>Multi-Factor Authentication (MFA)</H4>
          </AlertDialogTitle>
          <AlertDialogDescription>
            <View className="flex flex-col gap-4">
              <P>
                Please enter the 6-digit code generated by your authenticator
                app.
              </P>

              {error && (
                <View className="flex justify-center items-center">
                  <Small className="text-red-500">{error}</Small>
                </View>
              )}

              <View className="flex flex-col justify-center items-center">
                <OTPInput
                  ref={ref}
                  autoFocus={open}
                  value={otp}
                  onChange={setOtp}
                  maxLength={6}
                  editable={!isLoading}
                  render={({ slots }) => (
                    <View className="flex flex-row gap-2 items-center justify-center">
                      {slots.map((slot, idx) => (
                        <Slot key={idx} {...slot} />
                      ))}
                    </View>
                  )}
                />
              </View>

              <Button
                variant={"link"}
                onPress={() => {
                  Linking.openURL("mailto:support@locatr.tech");
                }}
                className="self-end"
              >
                <Small className="underline">Need help? Contact support</Small>
              </Button>
            </View>
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel onPress={onCloseAction} disabled={isLoading}>
            <Text>Cancel</Text>
          </AlertDialogCancel>
          <AlertDialogAction
            onPress={() => {
              handleSubmit(otp);
            }}
            disabled={isLoading}
          >
            {isLoading ? (
              <View className="flex flex-row items-center">
                <ActivityIndicator
                  size="small"
                  className="mr-2 color-muted-foreground"
                />
                <Text>Verifying...</Text>
              </View>
            ) : (
              <Text>Verify</Text>
            )}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
};
